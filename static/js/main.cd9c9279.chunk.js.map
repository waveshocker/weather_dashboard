{"version":3,"sources":["components/Forecast/Forecast.module.css","components/Conditions/Conditions.module.css","components/Conditions/Conditions.js","components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Forecast","useState","setResponseObj","city","setCity","unit","setUnit","setError","setLoading","onSubmit","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","textInput","value","onChange","target","Radio","checked","Button","Conditions","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,wBAAwB,OAAS,2B,gBCAnGD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,MAAQ,0BAA0B,OAAS,2BAA2B,KAAO,2B,wLCgBtHC,EAfI,SAACC,GACjB,OACI,yBAAKC,UAAWC,IAAQC,SACnBH,EAAMI,OAAS,2BAAOH,UAAWC,IAAQG,OAA1B,8BACfL,EAAMM,SAAW,yBAAKL,UAAWC,IAAQK,SACf,MAA1BP,EAAMQ,YAAYC,IACf,6BACI,2BAAG,gCAAST,EAAMQ,YAAYE,OAC9B,8CAAoBC,KAAKC,MAAMZ,EAAMQ,YAAYK,KAAKC,MAAtD,qBAA+Ed,EAAMQ,YAAYO,QAAQ,GAAGC,YAA5G,MAEN,O,gBC6EEC,EArFE,WAAO,IAAD,EAEiBC,mBAAS,IAF1B,mBAEdV,EAFc,KAEDW,EAFC,OAGGD,mBAAS,IAHZ,mBAGdE,EAHc,KAGRC,EAHQ,OAIGH,mBAAS,YAJZ,mBAIdI,EAJc,KAIRC,EAJQ,OAKKL,oBAAS,GALd,mBAKdd,EALc,KAKPoB,EALO,OAMSN,oBAAS,GANlB,mBAMdZ,EANc,KAMLmB,EANK,KA0CpB,OACC,6BAEI,+DACA,0BAAMC,SAtCV,SAAqBC,GAEjB,GADAA,EAAEC,iBACkB,IAAhBR,EAAKS,OACL,OAAOL,GAAS,GAGpBA,GAAS,GACTL,EAAe,IAEfM,GAAW,GAEX,IAAIK,EAAiBC,mBAAmBX,GAC3CY,MAAM,mEAAD,OAAoEV,EAApE,cAA8EQ,GAAkB,CAC9F,OAAU,MACV,QAAW,CACP,kBAAmB,4CACnB,iBAAkB,wDAGzBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,GAAqB,MAAjBA,EAASzB,IACT,MAAM,IAAI2B,MAEdjB,EAAee,GACfT,GAAW,MAEdY,OAAM,SAAAC,GACHd,GAAS,GACTC,GAAW,GACXc,QAAQC,IAAIF,EAAIG,cASZ,2BACIC,KAAK,OACLC,YAAY,aACZC,UAAU,KACV3C,UAAWC,IAAQ2C,UACnBC,MAAO1B,EACP2B,SAAU,SAACpB,GAAD,OAAON,EAAQM,EAAEqB,OAAOF,UAEtC,2BAAO7C,UAAWC,IAAQ+C,OACtB,2BACIP,KAAK,QACLhC,KAAK,QACLwC,QAAkB,aAAT5B,EACTwB,MAAM,WACNC,SAAU,SAACpB,GAAD,OAAOJ,EAAQI,EAAEqB,OAAOF,UAN1C,cAUA,2BAAO7C,UAAWC,IAAQ+C,OACtB,2BACIP,KAAK,QACLhC,KAAK,QACLwC,QAAkB,WAAT5B,EACTwB,MAAM,SACNC,SAAU,SAACpB,GAAD,OAAOJ,EAAQI,EAAEqB,OAAOF,UAN1C,WAUA,4BAAQ7C,UAAWC,IAAQiD,OAAQT,KAAK,UAAxC,iBAEJ,kBAACU,EAAD,CACE5C,YAAaA,EACbJ,MAAOA,EACPE,QAASA,MChER+C,MAhBf,WACE,OACE,yBAAKpD,UAAU,OACb,4BAAQA,UAAU,cAChB,mDACA,8BACE,kBAAC,EAAD,QAGJ,kECDcqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAjC,GACLmC,QAAQnC,MAAMA,EAAMqC,c","file":"static/js/main.cd9c9279.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"Forecast_TextInput__1mRzh\",\"Radio\":\"Forecast_Radio__4BFsK\",\"Button\":\"Forecast_Button__35RyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__34GbD\",\"Small\":\"Conditions_Small__tYJ3z\",\"Loader\":\"Conditions_Loader__1fykx\",\"spin\":\"Conditions_spin__3r2Z4\"};","import React from 'react';\r\nimport classes from './Conditions.module.css'\r\nconst conditions = (props) => {\r\n   return (\r\n       <div className={classes.Wrapper}>\r\n           {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\r\n           {props.loading && <div className={classes.Loader} />}\r\n           {props.responseObj.cod === 200 ?\r\n               <div>\r\n                   <p><strong>{props.responseObj.name}</strong></p>\r\n                   <p>It is currently {Math.round(props.responseObj.main.temp)} degrees out with {props.responseObj.weather[0].description}.</p>\r\n               </div>\r\n           : null\r\n           }\r\n       </div>\r\n   )\r\n}\r\nexport default conditions;","import React, { useState } from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\nimport classes from './Forecast.module.css';\r\n\r\nconst Forecast = () => {\r\n\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [city, setCity] = useState('');\r\n    let [unit, setUnit] = useState('imperial');\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n\r\n    function getForecast(e) {\r\n        e.preventDefault();\r\n        if (city.length === 0) {\r\n            return setError(true);\r\n        }\r\n        // Clear state in preparation for new data\r\n        setError(false);\r\n        setResponseObj({});\r\n       \r\n        setLoading(true);\r\n       \r\n        let uriEncodedCity = encodeURIComponent(city);\r\n     fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"0f45cc0e98mshf7dc6b8a599cd15p128fe8jsn03ecb66563dd\"\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            if (response.cod !== 200) {\r\n                throw new Error()\r\n            }\r\n            setResponseObj(response);\r\n            setLoading(false);\r\n        })\r\n        .catch(err => {\r\n            setError(true);\r\n            setLoading(false);\r\n            console.log(err.message);\r\n        });\r\n     }\r\n\r\n   return (\r\n    <div>       \r\n\r\n        <h2>Find Current Weather Conditions</h2>\r\n        <form onSubmit={getForecast}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter City\"\r\n                    maxLength=\"50\"\r\n                    className={classes.textInput}\r\n                    value={city}\r\n                    onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"imperial\"}\r\n                        value=\"imperial\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Fahrenheit\r\n                </label>\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"metric\"}\r\n                        value=\"metric\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Celcius\r\n                </label>\r\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\r\n            </form>\r\n            <Conditions\r\n              responseObj={responseObj}\r\n              error={error} //new\r\n              loading={loading} //new\r\n              />     \r\n    </div>\r\n   )\r\n}\r\nexport default Forecast;","import React from 'react';\nimport './App.css';\nimport Forecast from \"./components/Forecast/Forecast\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> React Weather App </h1>\n        <main>\n          <Forecast />\n        </main>\n      </header>\n      <footer>\n        Page created by waveshocker.\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}